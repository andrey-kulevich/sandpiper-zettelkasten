import { app, BrowserWindow, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
import { watchFiles, getFiles, deleteFile, readFile, addFile } from './utils/io';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	// eslint-disable-line global-require
	app.quit();
}

const createWindow = () => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		webPreferences: {
			nodeIntegration: true,
			nodeIntegrationInWorker: false,
			contextIsolation: false,
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
		},
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
	// Open the DevTools.
	mainWindow.webContents.openDevTools();

	return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
	const win = createWindow();
	watchFiles(win);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// -----------------------------------------------------

// return list of files
ipcMain.handle('app:get-files', () => {
	return getFiles();
});

// listen to file(s) add event
ipcMain.handle('app:on-file-add', (event, file) => {
	addFile(file);
});

// // open filesystem dialog to choose files
// ipcMain.handle('app:on-fs-dialog-open', (event, path) => {
// 	return readFile(path);
// });

// listen to file delete event
ipcMain.on('app:on-file-delete', (event, file) => {
	deleteFile(file.filepath);
});

// listen to file open event
ipcMain.handle('app:on-file-open', (event, filename) => {
	return readFile(filename);
});
